<?xml version="1.0" encoding="utf-8"?>
<templates>
  <template type="public" title="widget_ah_discord" version_id="220" version_string="2.2.0"><![CDATA[<xf:js><xf:include template="widget_ah_discord_js" /></xf:js>
<xf:css src="widget_ah_discord.less" />

<xf:if is="{{ $xf.visitor.hasPermission('ahDW_perms', 'ahDW_perm') }}">
	<div class="block"{{ widget_data($widget) }}>	
		<div class="block-container">
			<h3 class="block-minorHeader">
				{$title}
				<xf:if is="{$xf.options.ahDW_showJoin}">
					<xf:if is="$xf.options.ahDW_joinDisplay == 'title'">
						<a href="{$xf.options.ahDW_inviteLink}" target="_blank" class="button button--primary joinButton" style="margin-left: auto;">{$xf.options.ahDW_joinText}</a>
					</xf:if>
				</xf:if>
			</h3>
			<div class="block-body block-row">
				<div class="discord-widget"></div>
			</div>
		</div>
	</div>
</xf:if>]]></template>
  <template type="public" title="widget_ah_discord.less" version_id="221" version_string="2.2.1"><![CDATA[.block[data-widget-definition="ahDiscordWidget"] .block-minorHeader {
	display: flex;
	align-items: center;
}

.discord-widget {
	.xf-ahDW_container();
	
	.discord-tree {
		.discord-channel {
			.xf-ahDW_channel();
		}
	
		.discord-userlist {
			.xf-ahDW_userList();
			
			.discord-user {
				.xf-ahDW_user();
				
				.discord-avatar {
					.xf-ahDW_userAvatar();
				}
				
				.discord-user-status {
					.xf-ahDW_userStatus();
				}	
				
				.discord-online {
					background-color: @xf-ahDW_userStatusOnline;
				}
				
				.discord-idle {
					background-color: @xf-ahDW_userStatusIdle;
				}
				
				span {
					.xf-ahDW_userPlaying();
				}
			}
		}
		
		.discord-allusers {
			.xf-ahDW_allUsersList();
		}
	}
	
	.discord-users-online {
		.xf-ahDW_usersOnlineText();
	}
	
	.discord-join {
		text-align: center;
		margin-top: 9px;
			
		.joinButton {
			.xf-ahDW_joinServerButton();
		}
	}
}

.discord-widget div, .discord-widget span, .discord-widget applet, .discord-widget object, .discord-widget iframe, .discord-widget h1, .discord-widget h2, .discord-widget h3, .discord-widget h4, .discord-widget h5, .discord-widget h6, .discord-widget p, .discord-widget blockquote, .discord-widget pre, .discord-widget abbr, .discord-widget acronym, .discord-widget address, .discord-widget big, .discord-widget cite, .discord-widget code, .discord-widget del, .discord-widget dfn, .discord-widget em, .discord-widget img, .discord-widget ins, .discord-widget kbd, .discord-widget q, .discord-widget s, .discord-widget samp, .discord-widget small, .discord-widget strike, .discord-widget strong, .discord-widget sub, .discord-widget sup, .discord-widget tt, .discord-widget var, .discord-widget b, .discord-widget u, .discord-widget i, .discord-widget center, .discord-widget dl, .discord-widget dt, .discord-widget dd, .discord-widget ol, .discord-widget ul, .discord-widget li, .discord-widget fieldset, .discord-widget form, .discord-widget label, .discord-widget legend, .discord-widget table, .discord-widget caption, .discord-widget tbody, .discord-widget tfoot, .discord-widget thead, .discord-widget tr, .discord-widget th, .discord-widget td, .discord-widget article, .discord-widget aside, .discord-widget canvas, .discord-widget details, .discord-widget embed, .discord-widget figure, .discord-widget figcaption, .discord-widget footer, .discord-widget header, .discord-widget hgroup, .discord-widget menu, .discord-widget nav, .discord-widget output, .discord-widget ruby, .discord-widget section, .discord-widget summary, .discord-widget time, .discord-widget mark, .discord-widget audio, .discord-widget video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: middle;
}]]></template>
  <template type="public" title="widget_ah_discord_js" version_id="221" version_string="2.2.1"><![CDATA[var discordWidget = discordWidget || (function() {
    var b = {};
    var a = "1.1";
    return {
        init: function(c) {
            c.serverId = typeof c.serverId !== "undefined" ? c.serverId : false;
            c.title = typeof c.title !== "undefined" ? c.title : false;
            c.join = typeof c.join !== "undefined" ? c.join : true;
            c.alphabetical = typeof c.alphabetical !== "undefined" ? c.alphabetical : false;
            c.theme = typeof c.theme !== "undefined" ? c.theme : "light";
            c.hideChannels = typeof c.hideChannels !== "undefined" ? c.hideChannels : false;
            c.showAllUsers = typeof c.showAllUsers !== "undefined" ? c.showAllUsers : false;
            c.allUsersDefaultState = typeof c.allUsersDefaultState !== "undefined" ? c.allUsersDefaultState : true;
            c.showNick = typeof c.showNick !== "undefined" ? c.showNick : true;
            b.serverId = c.serverId;
            b.title = c.title;
            b.join = c.join;
            b.alphabetical = c.alphabetical;
            b.theme = c.theme;
            b.hideChannels = c.hideChannels;
            b.showAllUsers = c.showAllUsers;
            b.allUsersDefaultState = c.allUsersDefaultState;
            b.showNick = c.showNick
        },
        render: function() {
            if (window.jQuery) {
                d()
            }

            function d() {
                var h = "https://discordapp.com/api/servers/" + b.serverId + "/embed.json";
                var i = new XMLHttpRequest();
                i.onreadystatechange = function() {
                    if (i.readyState == 4 && i.status == 200) {
                        var l = JSON.parse(i.responseText);
                        j(l, b);
                        if (!b.allUsersDefaultState) {
                            $(".discord-allusers").toggle();
                            $(".discord-allusers-toggle").html("&#9656; Online Users")
                        }
                        $(".discord-allusers-toggle").click(function() {
                            $(".discord-allusers").toggle(100, function() {
                                if ($(".discord-allusers").is(":visible")) {
                                    $(".discord-allusers-toggle").html("&#9662; Online Users")
                                } else {
                                    $(".discord-allusers-toggle").html("&#9656; Online Users")
                                }
                            })
                        })
                    } else {
                        if (i.readyState == 4 && i.status == 404) {
                            j("404", b)
                        } else {
                            if (i.readyState == 4) {
                                j(i.status, b)
                            }
                        }
                    }
                };
                i.open("GET", h, true);
                i.send();

                function e(m, l) {
                    if (m.position < l.position) {
                        return -1
                    }
                    if (m.position > l.position) {
                        return 1
                    }
                    return 0
                }

                function g(l) {
                    return '<li class="discord-channel">' + l + '</li><ul class="discord-userlist">'
                }

                function f(o, m) {
                    var l = "";
                    if (b.showNick == true && o.nick) {
                        l = o.nick
                    } else {
                        l = o.username
                    }
                    var n = "";
                    if (o.game) {
                        n = " - " + o.game.name
                    }
					var nSanitized = n.replace(/<script[^>]*?>.*?<\/script>/gi, '').
					 replace(/<[\/\!]*?[^<>]*?>/gi, '').
					 replace(/<style[^>]*?>.*?<\/style>/gi, '').
					 replace(/<![\s\S]*?--[ \t\n\r]*>/gi, '');
                    if (o.channel_id == m) {
                        if (o.status != "online") {
                            return '<li class="discord-user"><img src="' + o.avatar_url + '" class="discord-avatar"/><div class="discord-user-status discord-idle"></div>' + l + "<span>" + nSanitized + "</span></li>"
                        } else {
                            return '<li class="discord-user"><img src="' + o.avatar_url + '" class="discord-avatar"/><div class="discord-user-status discord-online"></div>' + l + "<span>" + nSanitized + "</span></li>"
                        }
                    } else {
                        return ""
                    }
                }

                function j(y, n) {
                    var z = $(".discord-widget")[0];
                    $(z).attr("version", a);
                    var A = '<ul class="discord-tree"></ul><p class="discord-users-online"></p><p class="discord-join"></p><div class="discord-fade"></div>';
                    var u = "";
                    var r = "";
                    var l, w, x;
                    var v, m, q, o;
                    if (n.title !== false) {
                        z.innerHTML = '<div class="discord-title"><h3>' + n.title + "</h3></div>" + A;
                        l = $(".discord-tree")[0]
                    } else {
                        z.innerHTML = A;
                        l = $(".discord-tree")[0];
                        l.style.marginTop = "0"
                    }
                    switch (y) {
                        case "404":
                            l.innerHTML = '<span class="discord-error">Invalid Server ID</span>';
                            break;
                        case "522":
                            l.innerHTML = '<span class="discord-error">Discord is having issues.</span>';
                            break
                    }
                    if (!y) {
                        l.innerHTML = y;
                        return
                    }
                    w = $(".discord-users-online")[0];
                    x = $(".discord-join")[0];
                    if (typeof(n.hideChannels) !== "boolean" || !n.hideChannels) {
                        if (n.alphabetical) {
                            v = [];
                            o = [];
                            for (var t = 0; t < y.channels.length; t++) {
                                q = false;
                                for (var s = 0; s < n.hideChannels.length; s++) {
                                    if (y.channels[t].name.indexOf(n.hideChannels[s]) >= 0) {
                                        q = true
                                    }
                                }
                                if (!q) {
                                    v.push(y.channels[t])
                                } else {
                                    o.push(y.channels[t].id)
                                }
                            }
                            for (var t = 0; t < v.length; t++) {
                                u += g(v[t].name);
                                for (var s = 0; s < y.members.length; s++) {
                                    u += f(y.members[s], v[t].id)
                                }
                                u += "</ul>"
                            }
                        } else {
                            v = [];
                            o = [];
                            for (var t = 0; t < y.channels.length; t++) {
                                q = false;
                                for (var s = 0; s < n.hideChannels.length; s++) {
                                    if (y.channels[t].name.indexOf(n.hideChannels[s]) >= 0) {
                                        q = true
                                    }
                                }
                                if (!q) {
                                    v.push(y.channels[t])
                                } else {
                                    o.push(y.channels[t].id)
                                }
                            }
                            v.sort(e);
                            for (var t = 0; t < v.length; t++) {
                                u += g(v[t].name);
                                for (var s = 0; s < y.members.length; s++) {
                                    u += f(y.members[s], v[t].id)
                                }
                                u += "</ul>"
                            }
                        }
                    }
                    if (n.showAllUsers) {
                        u += '<li class="discord-channel discord-allusers-toggle">&#9662; Online Users</li><ul class="discord-userlist discord-allusers">';
                        for (var t = 0; t < y.members.length; t++) {
                            if (!y.members[t].channel_id || $.inArray(y.members[t].channel_id, o) >= 0) {
                                u += f(y.members[t], y.members[t].channel_id)
                            }
                        }
                        u += "</ul>"
                    }
                    var B = "";
                    if (y.instant_invite != "null") {
                        B = '<a href="' + '{$xf.options.ahDW_inviteLink}' + '" target="_blank" class="button button--primary joinButton">{$xf.options.ahDW_joinText}</a>'
                    }
                    l.innerHTML = u;
                    w.innerHTML = "Users Online: " + y.members.length;
                    if (n.join) {
                        x.innerHTML = B
                    } else {
                        x.style.display = "none"
                    }
                }
            }
        }
    }
}());


discordWidget.init({
	serverId: '{$xf.options.ahDW_serverID}',
	join: <xf:if is="$xf.options.ahDW_joinDisplay == 'bottom'"><xf:if is="{$xf.options.ahDW_showJoin}">true<xf:else />false</xf:if><xf:else />false</xf:if>,
	alphabetical: <xf:if is="{$xf.options.ahDW_alph}">true<xf:else />false</xf:if>,
	theme: 'light',
	hideChannels: <xf:if is="{$xf.options.ahDW_hideAll}">true<xf:else />[{$xf.options.ahDW_hideSpecific|raw}]</xf:if>,
	showAllUsers: <xf:if is="{$xf.options.ahDW_hideUsers}">false<xf:else />true</xf:if>,
	allUsersDefaultState: <xf:if is="{$xf.options.ahDW_collapseUsers}">false<xf:else />true</xf:if>
});

discordWidget.render();]]></template>
</templates>
